/**
 * @fileoverview gRPC-Web generated client stub for 
 * @enhanceable
 * @public
 */

// Code generated by protoc-gen-grpc-web. DO NOT EDIT.
// versions:
// 	protoc-gen-grpc-web v1.4.2
// 	protoc              v3.12.4
// source: backend.proto


/* eslint-disable */
// @ts-nocheck



const grpc = {};
grpc.web = require('grpc-web');

const proto = require('./backend_pb.js');

/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.BackendClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.BackendPromiseClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.ListRequestsRequest,
 *   !proto.ListRequestsResponse>}
 */
const methodDescriptor_Backend_ListRequests = new grpc.web.MethodDescriptor(
  '/Backend/ListRequests',
  grpc.web.MethodType.UNARY,
  proto.ListRequestsRequest,
  proto.ListRequestsResponse,
  /**
   * @param {!proto.ListRequestsRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.ListRequestsResponse.deserializeBinary
);


/**
 * @param {!proto.ListRequestsRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.ListRequestsResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.ListRequestsResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.BackendClient.prototype.listRequests =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/Backend/ListRequests',
      request,
      metadata || {},
      methodDescriptor_Backend_ListRequests,
      callback);
};


/**
 * @param {!proto.ListRequestsRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.ListRequestsResponse>}
 *     Promise that resolves to the response
 */
proto.BackendPromiseClient.prototype.listRequests =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/Backend/ListRequests',
      request,
      metadata || {},
      methodDescriptor_Backend_ListRequests);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.GetRequestRequest,
 *   !proto.GetRequestResponse>}
 */
const methodDescriptor_Backend_GetRequest = new grpc.web.MethodDescriptor(
  '/Backend/GetRequest',
  grpc.web.MethodType.UNARY,
  proto.GetRequestRequest,
  proto.GetRequestResponse,
  /**
   * @param {!proto.GetRequestRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.GetRequestResponse.deserializeBinary
);


/**
 * @param {!proto.GetRequestRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.GetRequestResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.GetRequestResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.BackendClient.prototype.getRequest =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/Backend/GetRequest',
      request,
      metadata || {},
      methodDescriptor_Backend_GetRequest,
      callback);
};


/**
 * @param {!proto.GetRequestRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.GetRequestResponse>}
 *     Promise that resolves to the response
 */
proto.BackendPromiseClient.prototype.getRequest =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/Backend/GetRequest',
      request,
      metadata || {},
      methodDescriptor_Backend_GetRequest);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.UpdateRequestRequest,
 *   !proto.UpdateRequestResponse>}
 */
const methodDescriptor_Backend_UpdateRequest = new grpc.web.MethodDescriptor(
  '/Backend/UpdateRequest',
  grpc.web.MethodType.UNARY,
  proto.UpdateRequestRequest,
  proto.UpdateRequestResponse,
  /**
   * @param {!proto.UpdateRequestRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.UpdateRequestResponse.deserializeBinary
);


/**
 * @param {!proto.UpdateRequestRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.UpdateRequestResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.UpdateRequestResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.BackendClient.prototype.updateRequest =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/Backend/UpdateRequest',
      request,
      metadata || {},
      methodDescriptor_Backend_UpdateRequest,
      callback);
};


/**
 * @param {!proto.UpdateRequestRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.UpdateRequestResponse>}
 *     Promise that resolves to the response
 */
proto.BackendPromiseClient.prototype.updateRequest =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/Backend/UpdateRequest',
      request,
      metadata || {},
      methodDescriptor_Backend_UpdateRequest);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.DeleteRequestRequest,
 *   !proto.DeleteRequestResponse>}
 */
const methodDescriptor_Backend_DeleteRequest = new grpc.web.MethodDescriptor(
  '/Backend/DeleteRequest',
  grpc.web.MethodType.UNARY,
  proto.DeleteRequestRequest,
  proto.DeleteRequestResponse,
  /**
   * @param {!proto.DeleteRequestRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.DeleteRequestResponse.deserializeBinary
);


/**
 * @param {!proto.DeleteRequestRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.DeleteRequestResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.DeleteRequestResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.BackendClient.prototype.deleteRequest =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/Backend/DeleteRequest',
      request,
      metadata || {},
      methodDescriptor_Backend_DeleteRequest,
      callback);
};


/**
 * @param {!proto.DeleteRequestRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.DeleteRequestResponse>}
 *     Promise that resolves to the response
 */
proto.BackendPromiseClient.prototype.deleteRequest =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/Backend/DeleteRequest',
      request,
      metadata || {},
      methodDescriptor_Backend_DeleteRequest);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.GetUserInfoRequest,
 *   !proto.GetUserInfoResponse>}
 */
const methodDescriptor_Backend_GetUserInfo = new grpc.web.MethodDescriptor(
  '/Backend/GetUserInfo',
  grpc.web.MethodType.UNARY,
  proto.GetUserInfoRequest,
  proto.GetUserInfoResponse,
  /**
   * @param {!proto.GetUserInfoRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.GetUserInfoResponse.deserializeBinary
);


/**
 * @param {!proto.GetUserInfoRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.GetUserInfoResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.GetUserInfoResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.BackendClient.prototype.getUserInfo =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/Backend/GetUserInfo',
      request,
      metadata || {},
      methodDescriptor_Backend_GetUserInfo,
      callback);
};


/**
 * @param {!proto.GetUserInfoRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.GetUserInfoResponse>}
 *     Promise that resolves to the response
 */
proto.BackendPromiseClient.prototype.getUserInfo =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/Backend/GetUserInfo',
      request,
      metadata || {},
      methodDescriptor_Backend_GetUserInfo);
};


module.exports = proto;

